---
import dayjs from 'dayjs';

import Layout from '../layouts/Layout.astro';
import AssetHistory from '../assets/history.svg';
import IconMicrophone from '../assets/icons/microphone.svg';
import IconNews from '../assets/icons/news.svg';
import IconNotes from '../assets/icons/notes.svg';
import IconYoutube from '../assets/icons/youtube.svg';

import {getUniqueArticles} from '../data/forem';
import {getPages} from '../data/markdown';
import {getVideos} from '../data/youtube';
import {getEpisodes} from '../data/podcast';
import {getNews} from '../data/revue';
import {switchLang} from '../lib/language';

interface HistoryRecord {
  type: 'article' | 'video' | 'podcast' | 'news';
  title: string;
  description: string;
  url: string;
  publishedAt: Date;
}

const [articles, pages, videos, episodes, news] = await Promise.all([
  getUniqueArticles(),
  getPages(),
  getVideos(),
  getEpisodes(),
  getNews(),
]);

const records: HistoryRecord[] = [
  {
    type: 'video',
    title: 'State Management Talks',
    description:
      'Зачем нужны стейт-менеджеры на фронтенде, что за стейт хранится в них и где место бизнес- и не только логике, разберем на Tver.io.',
    url: 'https://www.youtube.com/watch?v=cUSyJk6k2rk',
    publishedAt: new Date('2020-07-23T15:30:00Z'),
  },
  {
    type: 'video',
    title: 'Интеллектуальное шоу про frontend',
    description:
      'Сергей Сова участвует в effector core team, занимается развитием экосистемы. Делится опытом проектирования фронтенда в feature-sliced core team. Дмитрий Карловский большой любитель реактивности, виртуализации, распределённых систем, логики и, конечно, скоростных велосипедов.',
    url: 'https://www.youtube.com/watch?v=NhPjUO6trGY',
    publishedAt: new Date('2021-10-08T20:00:00Z'),
  },
  {
    type: 'podcast',
    title: 'Пятиминутка React — Effector',
    description:
      'В этом выпуске Сергей Сова расскажет про библиотеку управления состоянием Effector, плюсы, основные фишки и удобства, статус проекта, личный опыт использования.',
    url: 'https://soundcloud.com/5minreact/063-effector',
    publishedAt: new Date('2019-12-23T12:30:00Z'),
  },
  {
    type: 'podcast',
    title: 'Дизайн-системы и ui-киты',
    description:
      'Что такое дизайн-система, и как она строится и кому это нужно. Плюсы использования дизайн-системы, про наследование компонентов. Документация для ui-кита и как делать это проще.',
    url: 'https://spb-frontend.ru/podcast/11',
    publishedAt: new Date('2017-10-06T22:00:00Z'),
  },
  {
    type: 'video',
    title: 'Argumentarium: Effector, Reatom и Redux',
    description:
      'Автор Reatom Артём Арутюнян, Сергей Головин и Сергей Сова обсудят стейт-менеджмент в целом и Reatom, Redux и Effector в частности.',
    url: 'https://www.youtube.com/watch?v=Ble1JXIb_hE',
    publishedAt: new Date('2019-12-25T16:25:00Z'),
  },
  {
    type: 'video',
    title: 'Podlodka Frontend Crew #2',
    description:
      'Круглый стол: CSS-in-JS (не)нужен | Андрей Ситник, Артем Зверев, Сергей Сова, Александр Зубов',
    url: 'https://podlodka.io/crew-records',
    publishedAt: new Date('2021-08-03T14:00:00Z'),
  },
  {
    type: 'video',
    title: 'Argumentarium: хуки, декларативность и классы',
    description:
      'Так ли хороши хуки, как о них говорят, и можно ли полноценно заменить хуками методы жизненного цикла и не страдать? В нужном ли направлении развивается React или пора искать ему замену? Будем спорить и разбираться',
    url: 'https://www.youtube.com/watch?v=-KgCcIzP4Ys',
    publishedAt: new Date('2019-10-03T14:00:00Z'),
  },
  {
    type: 'video',
    title: 'Effector SPb Meetup #2',
    description:
      'В современной frontend-разработке мы сталкиваемся с задачами уменьшения зависимостей между модулями и наглядного описания их внутренних и внешних связей, желая снизить количество ошибок и упростить тестирование. На этом митапе мы расскажем и покажем на практике, как стать эффективнее с помощью effector.',
    url: 'https://www.youtube.com/watch?v=nLYc4PaTXYk',
    publishedAt: new Date('2021-04-29T12:00:00Z'),
  },
  {
    type: 'video',
    title: 'Effector SPb Meetup #1',
    description:
      'Effector — менеджер состояний frontend-приложений на javascript/typescript. Докладчики расскажут кому он может понадобиться, какие сущности имеет, как их комбинировать, как строить серверный рендеринг, и как устроено всё "под капотом".',
    url: 'https://www.youtube.com/watch?v=IacUIo9fXhI',
    publishedAt: new Date('2020-03-05T10:00:00Z'),
  },
  {
    type: 'article',
    title: 'React: особенности, перспективы, ситуация на рынке труда',
    description:
      'В объявлениях о поиске программистов часто встречается требование уметь работать с React. Иногда работодатели ожидают знания React не только от фронтендеров, но и от бэкенд-разработчиков. Почему эта библиотека настолько популярная, стоит ли изучать её сегодня, каковы её перспективы по мнению опытных программистов? Ответы на эти и другие вопросы читайте в обзорной статье.',
    url: 'https://ru.hexlet.io/blog/posts/biblioteka-react-review-article',
    publishedAt: new Date('2020-07-10T11:05:48.012+04:00'),
  },
  {
    type: 'video',
    title: '307 пакетов: Про личный бренд, комьюнити и DevRel',
    description:
      'Поговорили с Сергеем Совой о персональном бренде, обмазались новыми фичами, обсудили комьюнити вне комьюнити, а также узнали, кто на самом деле автор эффектора.',
    url: 'https://www.youtube.com/watch?v=QtsH31LD79c',
    publishedAt: new Date('2021-11-23T19:00:00+04:00'),
  },
  {
    type: 'video',
    title: 'Фронтенд Юность #216',
    description: 'В гостях Сергей Сова',
    url: 'https://www.youtube.com/watch?v=3QyrM02MLT4',
    publishedAt: new Date('2021-12-01T19:00:00Z'),
  },
  {
    type: 'video',
    title: 'Съебастьян: Ереван',
    description:
      'Продолжаем наше путешествие и рассказываем о жизни российских айтишников за пределами России. Наш гость, Frontend-архитектор Сергей Сова поделился своими впечатлениями от жизни в Ереване и рассказал, правда ли в Армении все играют в нарды:)',
    url: 'https://www.youtube.com/watch?v=s6atItVtGxE',
    publishedAt: new Date('2022-05-24T10:00:00Z'),
  },
  {
    type: 'video',
    title: 'Тяжелое утро с HolyJS: архитектура и архитекторы',
    description:
      'Архитектор и архитектура – два слова которые часто вызывают споры, непонимание и холивары. Ведущие «Тяжёлого утра» позовут экспертов и архитекторов, чтобы определить, что такое архитектура и кто такие архитекторы, чему учиться и что тренировать, чтобы стать им.',
    url: 'https://live.jugru.org/video?v=MTAwMTI0ijIwMDAwMTAwijA',
    publishedAt: new Date('2022-06-10T13:50:00Z'),
  },
  {
    type: 'video',
    title: 'Podlodka #286 — Архитектура фронтенда',
    description:
      'Какие есть абстракции, какие есть подходы, как они между собой связаны. В первой части поговорили в верхнеуровневом разрезе уровня флоу данных, а во второй про низкоуровневые компоненты – кэши, хранилища, верстка и другие.',
    url: 'https://podlodka.io/286',
    publishedAt: new Date('2022-09-18T16:00:00Z'),
  },
];

articles.forEach((article) =>
  records.push({
    type: 'article',
    title: article.title,
    description: article.description,
    url: article.url,
    publishedAt: new Date(article.published_at),
  }),
);

pages.forEach((page) =>
  records.push({
    type: 'article',
    title: page.title,
    description: page.description,
    url: page.url,
    publishedAt: new Date(page.published_at),
  }),
);

videos.forEach((video) =>
  records.push({
    type: 'video',
    title: video.title,
    description: video.description,
    publishedAt: new Date(video.publishedAt),
    url: video.url,
  }),
);

episodes.forEach((episode) =>
  records.push({
    type: 'podcast',
    title: episode.title,
    description: episode.description,
    publishedAt: new Date(episode.pubDate),
    url: episode.link,
  }),
);

news.forEach((issue) =>
  records.push({
    type: 'news',
    title: issue.title,
    description: issue.description,
    publishedAt: new Date(issue.publishedAt),
    url: issue.url,
  }),
);

records.sort((a, b) => b.publishedAt.valueOf() - a.publishedAt.valueOf());

const icon: {[key in HistoryRecord['type']]: string} = {
  article: IconNotes,
  video: IconYoutube,
  podcast: IconMicrophone,
  news: IconNews,
};
---

<Layout
  title={switchLang({
    en: 'Publish history',
    ru: 'История публикаций',
  })}
  description={switchLang({
    en: 'All my published content in chronological order',
    ru: 'Весь мой контент в хронологическом порядке',
  })}
>
  <main class="relative">
    <img src={AssetHistory} class="title-image z-10" />
    <div class="space-y-5 relative">
      {
        records.map((record, index) => {
          const recordYear = record.publishedAt.getUTCFullYear();
          const recordMonth = record.publishedAt.getUTCMonth();
          const previousYear = records[index - 1]?.publishedAt.getUTCFullYear() ?? recordYear + 1;
          const previousMonth = records[index - 1]?.publishedAt.getUTCMonth() ?? recordMonth + 1;
          return (
            <Fragment>
              {recordYear !== previousYear ? (
                <a href={`#r-${recordYear}`} id={`r-${recordYear}`} class="year">
                  {record.publishedAt.getUTCFullYear()}
                </a>
              ) : null}
              {recordMonth !== previousMonth || recordYear !== previousYear ? (
                <a
                  href={`#r-${recordYear}-${recordMonth}`}
                  id={`r-${recordYear}-${recordMonth}`}
                  class="month"
                >
                  {dayjs(record.publishedAt).format('MMMM')}
                </a>
              ) : null}
              <a class="record z-50 static" href={record.url} rel="noopener">
                <div class="text-xl px-4 flex space-x-2">
                  <img src={icon[record.type]} class="w-5 inline-block" />
                  <span>{record.title}</span>
                </div>
                <span class="text-sm pr-4 pl-12">
                  {dayjs(record.publishedAt).format('DD MMMM YYYY')}
                </span>
                <p class="pr-4 pl-12">{record.description}</p>
              </a>
            </Fragment>
          );
        })
      }
      <div class="line"></div>
    </div>
  </main>
</Layout>
<style>
  main {
    margin: auto;
    padding: 1em;
    max-width: 70ch;
    @apply flex flex-col gap-10;
  }

  .title-image {
    @apply max-h-14 my-2;
  }

  .line {
    @apply absolute w-1 bg-slate-400 top-0 bottom-0 left-6 rounded;
    z-index: -1;
  }

  .year {
    @apply block top-0 sticky z-10 px-6 py-2 -mx-4 bg-black text-white;
    box-shadow: 0px 0.8px 0.7px rgba(0, 0, 0, 0.017), 0px 2px 1.6px rgba(0, 0, 0, 0.024),
      0px 3.8px 3px rgba(0, 0, 0, 0.03), 0px 6.7px 5.4px rgba(0, 0, 0, 0.036),
      0px 12.5px 10px rgba(0, 0, 0, 0.043), 0px 30px 24px rgba(0, 0, 0, 0.06);
  }

  .year:not(:first-child) {
    margin-top: 4rem !important;
  }

  .month {
    @apply inline-block ml-10 text-slate-600 font-medium py-0.5 px-2 rounded hover:bg-slate-500 hover:text-white;
  }

  @media (min-width: 560px) {
    .title-image {
      @apply max-h-20 my-3 mr-6;
    }
  }

  @media (min-width: 960px) {
    .title-image {
      @apply max-h-24 my-4 -ml-20;
    }
  }

  .record {
    @apply bg-white rounded-md flex flex-col gap-1 overflow-hidden py-3;

    box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px,
      rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
    transition: box-shadow 0.6s cubic-bezier(0.22, 1, 0.36, 1),
      transform 0.6s cubic-bezier(0.22, 1, 0.36, 1);
  }

  .record:hover {
    box-shadow: rgba(0, 0, 0, 0.2) 0px 8px 8px, rgba(0, 0, 0, 0.2) 0px 13px 26px -3px,
      rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
    transform: translateY(-3px);
  }
</style>
